@use 'sass:math';

$mobile: '(max-width: 991px)';
$mobileHorizontal: '(min-width: 576px) and (max-width: 767.98px)';
$tablet: '(min-width: 768px) and (max-width: 991.98px)';
$desktop: '(min-width: 992px)';

$base-pixel-size: 16;

@media screen and (orientation: landscape) {
  :root {
    --layoutWidth: 1280;
    --layoutHeight: 800;
  }
}

@media screen and (orientation: portrait) {
  :root {
    --layoutWidth: 800;
    --layoutHeight: 1280;
  }
}

@mixin respond-to($media) {
  @media only screen and #{$media} {
    @content;
  }
}

@function vw($value) {
  @return #{($value)}vw;
}

@function vh($value) {
  @return #{($value)}vh;
}

@function px($value) {
  @return #{($value)}px;
}

@function px-to-vw($value) {
  @return calc(($value * 100vw) / var(--layoutWidth));
}

@function px-to-vh($value) {
  @return calc(($value * 100vh) / var(--layoutHeight));
}

@function rem($pxValue) {
  @return math.div($pxValue, $base-pixel-size) * 1rem;
}

@mixin font-size($target) {
  font-size: vw(math.div($target, 4));

  @include respond-to($mobileHorizontal) {
    font-size: vw(math.div($target, 8));
  }

  @include respond-to($tablet) {
    font-size: vw(math.div($target, 8));
  }

  @include respond-to($desktop) {
    font-size: #{$target}px;
    font-size: rem($target);
  }
}

@mixin scrollbar($width: px(8), $trackColor: $white, $thumbColor: $dark) {
  &::-webkit-scrollbar {
    background: $trackColor;
    width: $width;
  }

  &::-webkit-scrollbar:vertical {
    background: $trackColor;
    width: $width;
  }

  &::-webkit-scrollbar-track {
    background: $trackColor;
  }

  &::-webkit-scrollbar-thumb {
    background: $thumbColor;
    border-radius: calc(infinity * 1px);
  }

  &::-moz-scrollbar {
    width: $width;
  }

  &::-moz-scrollbar-track {
    background: $trackColor;
  }

  &::-moz-scrollbar-thumb {
    background: $thumbColor;
  }
}
